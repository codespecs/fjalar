# Makefile.in generated by automake 1.6.3 from Makefile.am.
# @configure_input@

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@
SHELL = @SHELL@

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
libdir = @libdir@
infodir = @infodir@
mandir = @mandir@
includedir = @includedir@
oldincludedir = /usr/include
pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
top_builddir = ../..

ACLOCAL = @ACLOCAL@
AUTOCONF = @AUTOCONF@
AUTOMAKE = @AUTOMAKE@
AUTOHEADER = @AUTOHEADER@

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_HEADER = $(INSTALL_DATA)
transform = @program_transform_name@
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
host_alias = @host_alias@
host_triplet = @host@

EXEEXT = @EXEEXT@
OBJEXT = @OBJEXT@
PATH_SEPARATOR = @PATH_SEPARATOR@
AMTAR = @AMTAR@
ARCH_CORE_AM_CCASFLAGS = @ARCH_CORE_AM_CCASFLAGS@
ARCH_CORE_AM_CFLAGS = @ARCH_CORE_AM_CFLAGS@
ARCH_TOOL_AM_CFLAGS = @ARCH_TOOL_AM_CFLAGS@
AS = @AS@
ASFLAGS = @ASFLAGS@
AWK = @AWK@
CC = @CC@
CCAS = @CCAS@
CCASFLAGS = @CCASFLAGS@
CPP = @CPP@
CXX = @CXX@
DEFAULT_SUPP = @DEFAULT_SUPP@
DEPDIR = @DEPDIR@
GDB = @GDB@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
KICKSTART_BASE = @KICKSTART_BASE@
LN_S = @LN_S@
MAINT = @MAINT@
PACKAGE = @PACKAGE@
PERL = @PERL@
PREFERRED_STACK_BOUNDARY = @PREFERRED_STACK_BOUNDARY@
RANLIB = @RANLIB@
STRIP = @STRIP@
VERSION = @VERSION@
VEX_DIR = @VEX_DIR@
VG_ARCH = @VG_ARCH@
VG_ARCH_ALL = @VG_ARCH_ALL@
VG_OS = @VG_OS@
VG_OS_ALL = @VG_OS_ALL@
VG_PLATFORM = @VG_PLATFORM@
VG_PLATFORM_ALL = @VG_PLATFORM_ALL@
am__include = @am__include@
am__quote = @am__quote@
install_sh = @install_sh@
SUBDIRS = ${VG_ARCH}     .
DIST_SUBDIRS = ${VG_ARCH_ALL} .

noinst_SCRIPTS = filter_allocs filter_leak_check_size \
		 filter_stderr filter_stderr_backtrace


noinst_HEADERS = scalar.h

EXTRA_DIST = $(noinst_SCRIPTS) \
	addressable.stderr.exp addressable.stdout.exp addressable.vgtest \
	badaddrvalue.stderr.exp \
	badaddrvalue.stdout.exp badaddrvalue.vgtest \
	badfree-2trace.stderr.exp badfree-2trace.vgtest \
	badfree.stderr.exp badfree.vgtest \
	badjump.stderr.exp badjump.vgtest \
	badjump2.stderr.exp badjump2.vgtest \
	badloop.stderr.exp badloop.vgtest \
	badpoll.stderr.exp badpoll.vgtest \
	badrw.stderr.exp badrw.vgtest \
	brk.stderr.exp brk.vgtest \
	brk2.stderr.exp brk2.vgtest \
	buflen_check.stderr.exp buflen_check.vgtest \
	clientperm.stderr.exp \
	clientperm.stdout.exp clientperm.vgtest \
	custom_alloc.stderr.exp custom_alloc.vgtest \
	describe-block.stderr.exp describe-block.vgtest \
	doublefree.stderr.exp doublefree.vgtest \
	error_counts.stderr.exp error_counts.stdout.exp error_counts.vgtest \
	errs1.stderr.exp errs1.vgtest \
	exitprog.stderr.exp exitprog.vgtest \
	execve.stderr.exp execve.vgtest \
	execve2.stderr.exp execve2.vgtest \
	fprw.stderr.exp fprw.vgtest \
	fwrite.stderr.exp fwrite.stdout.exp fwrite.vgtest \
	inits.stderr.exp inits.vgtest \
	inline.stderr.exp inline.stdout.exp inline.vgtest \
	leak-0.vgtest leak-0.stderr.exp \
	leak-cycle.vgtest leak-cycle.stderr.exp \
	leak-tree.vgtest leak-tree.stderr.exp \
	leak-regroot.vgtest leak-regroot.stderr.exp \
	leakotron.vgtest leakotron.stdout.exp leakotron.stderr.exp \
	malloc1.stderr.exp malloc1.vgtest \
	malloc2.stderr.exp malloc2.vgtest \
	malloc3.stderr.exp malloc3.stdout.exp malloc3.vgtest \
	manuel1.stderr.exp manuel1.stdout.exp manuel1.vgtest \
	manuel2.stderr.exp manuel2.stdout.exp manuel2.vgtest \
	manuel3.stderr.exp manuel3.vgtest \
	match-overrun.stderr.exp match-overrun.vgtest match-overrun.supp \
	memalign_test.stderr.exp memalign_test.vgtest \
	memalign2.stderr.exp memalign2.vgtest \
	memcmptest.stderr.exp memcmptest.stdout.exp memcmptest.vgtest \
	mempool.stderr.exp mempool.vgtest \
	mismatches.stderr.exp mismatches.vgtest \
	mmaptest.stderr.exp mmaptest.vgtest \
	nanoleak.stderr.exp nanoleak.vgtest \
	nanoleak_supp.stderr.exp nanoleak_supp.vgtest nanoleak.supp \
	new_nothrow.stderr.exp new_nothrow.vgtest \
	new_override.stderr.exp new_override.stdout.exp new_override.vgtest \
	null_socket.stderr.exp null_socket.vgtest \
	overlap.stderr.exp overlap.stdout.exp overlap.vgtest \
	pointer-trace.vgtest pointer-trace.stdout.exp pointer-trace.stderr.exp \
	post-syscall.stderr.exp post-syscall.stdout.exp post-syscall.vgtest \
	realloc1.stderr.exp realloc1.vgtest \
	realloc2.stderr.exp realloc2.vgtest \
	realloc3.stderr.exp realloc3.vgtest \
	scalar.stderr.exp scalar.vgtest \
	scalar_fork.stderr.exp scalar_fork.vgtest \
	scalar_exit_group.stderr.exp scalar_exit_group.vgtest \
	scalar_supp.stderr.exp scalar_supp.vgtest scalar_supp.supp \
	scalar_vfork.stderr.exp scalar_vfork.vgtest \
	sigaltstack.stderr.exp sigaltstack.vgtest \
	signal2.stderr.exp signal2.stdout.exp signal2.vgtest \
	sigprocmask.stderr.exp sigprocmask.vgtest \
	str_tester.stderr.exp str_tester.vgtest \
	supp1.stderr.exp supp1.vgtest \
	supp2.stderr.exp supp2.vgtest \
	supp.supp \
	suppfree.stderr.exp suppfree.vgtest \
	toobig-allocs.stderr.exp toobig-allocs.vgtest \
	trivialleak.stderr.exp trivialleak.vgtest \
	weirdioctl.stderr.exp weirdioctl.stdout.exp weirdioctl.vgtest \
	metadata.stderr.exp metadata.stdout.exp metadata.vgtest \
	threadederrno.stderr.exp threadederrno.stdout.exp \
	threadederrno.vgtest \
	vgtest_ume.stderr.exp vgtest_ume.vgtest \
	writev.stderr.exp writev.stderr.exp2 writev.stderr.exp3 writev.vgtest \
	zeropage.stderr.exp zeropage.stderr.exp2 zeropage.vgtest


check_PROGRAMS = \
	addressable \
	badaddrvalue badfree badjump badjump2 \
	badloop badpoll badrw brk brk2 buflen_check \
	clientperm custom_alloc \
	describe-block \
	doublefree error_counts errs1 exitprog execve execve2 \
	fprw fwrite hello inits inline \
	leak-0 leak-cycle leak-tree leak-regroot leakotron \
	malloc1 malloc2 malloc3 manuel1 manuel2 manuel3 \
	match-overrun \
	memalign_test memalign2 memcmptest mempool mmaptest \
	nanoleak new_nothrow \
	null_socket overlap \
	pointer-trace \
	post-syscall \
	realloc1 realloc2 realloc3 \
	scalar scalar_exit_group scalar_fork scalar_supp scalar_vfork \
	sigaltstack signal2 sigprocmask \
	str_tester supp1 supp2 suppfree \
	trivialleak weirdioctl	\
	mismatches new_override metadata threadederrno \
	vgtest_ume \
	writev zeropage


AM_CPPFLAGS = -I$(top_srcdir) -I$(top_srcdir)/include -I$(top_builddir)/include -I@VEX_DIR@/pub
AM_CFLAGS = $(WERROR) -Winline -Wall -Wshadow -g 
AM_CXXFLAGS = $(AM_CFLAGS)

# C ones
addressable_SOURCES = addressable.c
badaddrvalue_SOURCES = badaddrvalue.c
badfree_SOURCES = badfree.c
badjump_SOURCES = badjump.c
badjump2_SOURCES = badjump2.c
badloop_SOURCES = badloop.c
badpoll_SOURCES = badpoll.c
badrw_SOURCES = badrw.c
brk_SOURCES = brk.c
brk2_SOURCES = brk2.c
buflen_check_SOURCES = buflen_check.c
clientperm_SOURCES = clientperm.c
custom_alloc_SOURCES = custom_alloc.c
describe_block_SOURCES = describe-block.c
doublefree_SOURCES = doublefree.c
error_counts_SOURCES = error_counts.c
errs1_SOURCES = errs1.c
execve_SOURCES = execve.c
execve2_SOURCES = execve2.c
exitprog_SOURCES = exitprog.c
fprw_SOURCES = fprw.c
fwrite_SOURCES = fwrite.c
inits_SOURCES = inits.c
inline_SOURCES = inline.c
leak_0_SOURCES = leak-0.c
leak_cycle_SOURCES = leak-cycle.c
leak_tree_SOURCES = leak-tree.c
leak_regroot_SOURCES = leak-regroot.c
leakotron_SOURCES = leakotron.c
malloc1_SOURCES = malloc1.c
malloc2_SOURCES = malloc2.c
malloc3_SOURCES = malloc3.c
manuel1_SOURCES = manuel1.c
manuel2_SOURCES = manuel2.c
manuel3_SOURCES = manuel3.c
match_overrun_SOURCES = match-overrun.c
mmaptest_SOURCES = mmaptest.c
memalign_test_SOURCES = memalign_test.c
memalign2_SOURCES = memalign2.c
memcmptest_SOURCES = memcmptest.c
memcmptest_CFLAGS = $(AM_CFLAGS) -fno-builtin-memcmp
mempool_SOURCES = mempool.c
nanoleak_SOURCES = nanoleak.c
null_socket_SOURCES = null_socket.c
overlap_SOURCES = overlap.c
# Don't allow GCC to inline memcpy(), because then we can't intercept it
overlap_CFLAGS = $(AM_CFLAGS) -fno-builtin-memcpy
pointer_trace_SOURCES = pointer-trace.c
post_syscall_SOURCES = post-syscall.c
realloc1_SOURCES = realloc1.c
realloc2_SOURCES = realloc2.c
realloc3_SOURCES = realloc3.c
scalar_SOURCES = scalar.c
scalar_exit_group_SOURCES = scalar_exit_group.c
scalar_fork_SOURCES = scalar_fork.c
scalar_supp_SOURCES = scalar_supp.c
scalar_vfork_SOURCES = scalar_vfork.c
signal2_SOURCES = signal2.c
sigprocmask_SOURCES = sigprocmask.c
supp1_SOURCES = supp.c
supp2_SOURCES = supp.c
suppfree_SOURCES = suppfree.c
sigaltstack_SOURCES = sigaltstack.c
trivialleak_SOURCES = trivialleak.c
weirdioctl_SOURCES = weirdioctl.c
metadata_SOURCES = metadata.c
str_tester_SOURCES = str_tester.c
str_tester_CFLAGS = $(AM_CFLAGS) -Wno-shadow
threadederrno_SOURCES = threadederrno.c
threadederrno_LDADD = -lpthread
writev_SOURCES = writev.c
zeropage_SOURCES = zeropage.c

# C++ ones
mismatches_SOURCES = mismatches.cpp
new_nothrow_SOURCES = new_nothrow.cpp
new_override_SOURCES = new_override.cpp

# Valgrind unit self-tests
hello_SOURCES = hello.c
@USE_PIE_TRUE@hello_CFLAGS = $(AM_CFLAGS) -fpie
@USE_PIE_TRUE@hello_LDFLAGS = -pie
@USE_PIE_FALSE@hello_LDFLAGS = -Wl,-defsym,kickstart_base=0x50000000 \
@USE_PIE_FALSE@			  -Wl,-T,../../coregrind/${VG_ARCH}/stage2.lds

@USE_PIE_FALSE@hello_DEPENDENCIES = ../../coregrind/${VG_ARCH}/stage2.lds

vgtest_ume_SOURCES = vgtest_ume.c
vgtest_ume_LDADD = ../../coregrind/ume.o \
			  ../../coregrind/jmp_with_stack.o

subdir = memcheck/tests
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
check_PROGRAMS = addressable$(EXEEXT) badaddrvalue$(EXEEXT) \
	badfree$(EXEEXT) badjump$(EXEEXT) badjump2$(EXEEXT) \
	badloop$(EXEEXT) badpoll$(EXEEXT) badrw$(EXEEXT) brk$(EXEEXT) \
	brk2$(EXEEXT) buflen_check$(EXEEXT) clientperm$(EXEEXT) \
	custom_alloc$(EXEEXT) describe-block$(EXEEXT) \
	doublefree$(EXEEXT) error_counts$(EXEEXT) errs1$(EXEEXT) \
	exitprog$(EXEEXT) execve$(EXEEXT) execve2$(EXEEXT) \
	fprw$(EXEEXT) fwrite$(EXEEXT) hello$(EXEEXT) inits$(EXEEXT) \
	inline$(EXEEXT) leak-0$(EXEEXT) leak-cycle$(EXEEXT) \
	leak-tree$(EXEEXT) leak-regroot$(EXEEXT) leakotron$(EXEEXT) \
	malloc1$(EXEEXT) malloc2$(EXEEXT) malloc3$(EXEEXT) \
	manuel1$(EXEEXT) manuel2$(EXEEXT) manuel3$(EXEEXT) \
	match-overrun$(EXEEXT) memalign_test$(EXEEXT) \
	memalign2$(EXEEXT) memcmptest$(EXEEXT) mempool$(EXEEXT) \
	mmaptest$(EXEEXT) nanoleak$(EXEEXT) new_nothrow$(EXEEXT) \
	null_socket$(EXEEXT) overlap$(EXEEXT) pointer-trace$(EXEEXT) \
	post-syscall$(EXEEXT) realloc1$(EXEEXT) realloc2$(EXEEXT) \
	realloc3$(EXEEXT) scalar$(EXEEXT) scalar_exit_group$(EXEEXT) \
	scalar_fork$(EXEEXT) scalar_supp$(EXEEXT) scalar_vfork$(EXEEXT) \
	sigaltstack$(EXEEXT) signal2$(EXEEXT) sigprocmask$(EXEEXT) \
	str_tester$(EXEEXT) supp1$(EXEEXT) supp2$(EXEEXT) \
	suppfree$(EXEEXT) trivialleak$(EXEEXT) weirdioctl$(EXEEXT) \
	mismatches$(EXEEXT) new_override$(EXEEXT) metadata$(EXEEXT) \
	threadederrno$(EXEEXT) vgtest_ume$(EXEEXT) writev$(EXEEXT) \
	zeropage$(EXEEXT)
am_addressable_OBJECTS = addressable.$(OBJEXT)
addressable_OBJECTS = $(am_addressable_OBJECTS)
addressable_LDADD = $(LDADD)
addressable_DEPENDENCIES =
addressable_LDFLAGS =
am_badaddrvalue_OBJECTS = badaddrvalue.$(OBJEXT)
badaddrvalue_OBJECTS = $(am_badaddrvalue_OBJECTS)
badaddrvalue_LDADD = $(LDADD)
badaddrvalue_DEPENDENCIES =
badaddrvalue_LDFLAGS =
am_badfree_OBJECTS = badfree.$(OBJEXT)
badfree_OBJECTS = $(am_badfree_OBJECTS)
badfree_LDADD = $(LDADD)
badfree_DEPENDENCIES =
badfree_LDFLAGS =
am_badjump_OBJECTS = badjump.$(OBJEXT)
badjump_OBJECTS = $(am_badjump_OBJECTS)
badjump_LDADD = $(LDADD)
badjump_DEPENDENCIES =
badjump_LDFLAGS =
am_badjump2_OBJECTS = badjump2.$(OBJEXT)
badjump2_OBJECTS = $(am_badjump2_OBJECTS)
badjump2_LDADD = $(LDADD)
badjump2_DEPENDENCIES =
badjump2_LDFLAGS =
am_badloop_OBJECTS = badloop.$(OBJEXT)
badloop_OBJECTS = $(am_badloop_OBJECTS)
badloop_LDADD = $(LDADD)
badloop_DEPENDENCIES =
badloop_LDFLAGS =
am_badpoll_OBJECTS = badpoll.$(OBJEXT)
badpoll_OBJECTS = $(am_badpoll_OBJECTS)
badpoll_LDADD = $(LDADD)
badpoll_DEPENDENCIES =
badpoll_LDFLAGS =
am_badrw_OBJECTS = badrw.$(OBJEXT)
badrw_OBJECTS = $(am_badrw_OBJECTS)
badrw_LDADD = $(LDADD)
badrw_DEPENDENCIES =
badrw_LDFLAGS =
am_brk_OBJECTS = brk.$(OBJEXT)
brk_OBJECTS = $(am_brk_OBJECTS)
brk_LDADD = $(LDADD)
brk_DEPENDENCIES =
brk_LDFLAGS =
am_brk2_OBJECTS = brk2.$(OBJEXT)
brk2_OBJECTS = $(am_brk2_OBJECTS)
brk2_LDADD = $(LDADD)
brk2_DEPENDENCIES =
brk2_LDFLAGS =
am_buflen_check_OBJECTS = buflen_check.$(OBJEXT)
buflen_check_OBJECTS = $(am_buflen_check_OBJECTS)
buflen_check_LDADD = $(LDADD)
buflen_check_DEPENDENCIES =
buflen_check_LDFLAGS =
am_clientperm_OBJECTS = clientperm.$(OBJEXT)
clientperm_OBJECTS = $(am_clientperm_OBJECTS)
clientperm_LDADD = $(LDADD)
clientperm_DEPENDENCIES =
clientperm_LDFLAGS =
am_custom_alloc_OBJECTS = custom_alloc.$(OBJEXT)
custom_alloc_OBJECTS = $(am_custom_alloc_OBJECTS)
custom_alloc_LDADD = $(LDADD)
custom_alloc_DEPENDENCIES =
custom_alloc_LDFLAGS =
am_describe_block_OBJECTS = describe-block.$(OBJEXT)
describe_block_OBJECTS = $(am_describe_block_OBJECTS)
describe_block_LDADD = $(LDADD)
describe_block_DEPENDENCIES =
describe_block_LDFLAGS =
am_doublefree_OBJECTS = doublefree.$(OBJEXT)
doublefree_OBJECTS = $(am_doublefree_OBJECTS)
doublefree_LDADD = $(LDADD)
doublefree_DEPENDENCIES =
doublefree_LDFLAGS =
am_error_counts_OBJECTS = error_counts.$(OBJEXT)
error_counts_OBJECTS = $(am_error_counts_OBJECTS)
error_counts_LDADD = $(LDADD)
error_counts_DEPENDENCIES =
error_counts_LDFLAGS =
am_errs1_OBJECTS = errs1.$(OBJEXT)
errs1_OBJECTS = $(am_errs1_OBJECTS)
errs1_LDADD = $(LDADD)
errs1_DEPENDENCIES =
errs1_LDFLAGS =
am_execve_OBJECTS = execve.$(OBJEXT)
execve_OBJECTS = $(am_execve_OBJECTS)
execve_LDADD = $(LDADD)
execve_DEPENDENCIES =
execve_LDFLAGS =
am_execve2_OBJECTS = execve2.$(OBJEXT)
execve2_OBJECTS = $(am_execve2_OBJECTS)
execve2_LDADD = $(LDADD)
execve2_DEPENDENCIES =
execve2_LDFLAGS =
am_exitprog_OBJECTS = exitprog.$(OBJEXT)
exitprog_OBJECTS = $(am_exitprog_OBJECTS)
exitprog_LDADD = $(LDADD)
exitprog_DEPENDENCIES =
exitprog_LDFLAGS =
am_fprw_OBJECTS = fprw.$(OBJEXT)
fprw_OBJECTS = $(am_fprw_OBJECTS)
fprw_LDADD = $(LDADD)
fprw_DEPENDENCIES =
fprw_LDFLAGS =
am_fwrite_OBJECTS = fwrite.$(OBJEXT)
fwrite_OBJECTS = $(am_fwrite_OBJECTS)
fwrite_LDADD = $(LDADD)
fwrite_DEPENDENCIES =
fwrite_LDFLAGS =
am_hello_OBJECTS = hello-hello.$(OBJEXT)
hello_OBJECTS = $(am_hello_OBJECTS)
hello_LDADD = $(LDADD)
am_inits_OBJECTS = inits.$(OBJEXT)
inits_OBJECTS = $(am_inits_OBJECTS)
inits_LDADD = $(LDADD)
inits_DEPENDENCIES =
inits_LDFLAGS =
am_inline_OBJECTS = inline.$(OBJEXT)
inline_OBJECTS = $(am_inline_OBJECTS)
inline_LDADD = $(LDADD)
inline_DEPENDENCIES =
inline_LDFLAGS =
am_leak_0_OBJECTS = leak-0.$(OBJEXT)
leak_0_OBJECTS = $(am_leak_0_OBJECTS)
leak_0_LDADD = $(LDADD)
leak_0_DEPENDENCIES =
leak_0_LDFLAGS =
am_leak_cycle_OBJECTS = leak-cycle.$(OBJEXT)
leak_cycle_OBJECTS = $(am_leak_cycle_OBJECTS)
leak_cycle_LDADD = $(LDADD)
leak_cycle_DEPENDENCIES =
leak_cycle_LDFLAGS =
am_leak_regroot_OBJECTS = leak-regroot.$(OBJEXT)
leak_regroot_OBJECTS = $(am_leak_regroot_OBJECTS)
leak_regroot_LDADD = $(LDADD)
leak_regroot_DEPENDENCIES =
leak_regroot_LDFLAGS =
am_leak_tree_OBJECTS = leak-tree.$(OBJEXT)
leak_tree_OBJECTS = $(am_leak_tree_OBJECTS)
leak_tree_LDADD = $(LDADD)
leak_tree_DEPENDENCIES =
leak_tree_LDFLAGS =
am_leakotron_OBJECTS = leakotron.$(OBJEXT)
leakotron_OBJECTS = $(am_leakotron_OBJECTS)
leakotron_LDADD = $(LDADD)
leakotron_DEPENDENCIES =
leakotron_LDFLAGS =
am_malloc1_OBJECTS = malloc1.$(OBJEXT)
malloc1_OBJECTS = $(am_malloc1_OBJECTS)
malloc1_LDADD = $(LDADD)
malloc1_DEPENDENCIES =
malloc1_LDFLAGS =
am_malloc2_OBJECTS = malloc2.$(OBJEXT)
malloc2_OBJECTS = $(am_malloc2_OBJECTS)
malloc2_LDADD = $(LDADD)
malloc2_DEPENDENCIES =
malloc2_LDFLAGS =
am_malloc3_OBJECTS = malloc3.$(OBJEXT)
malloc3_OBJECTS = $(am_malloc3_OBJECTS)
malloc3_LDADD = $(LDADD)
malloc3_DEPENDENCIES =
malloc3_LDFLAGS =
am_manuel1_OBJECTS = manuel1.$(OBJEXT)
manuel1_OBJECTS = $(am_manuel1_OBJECTS)
manuel1_LDADD = $(LDADD)
manuel1_DEPENDENCIES =
manuel1_LDFLAGS =
am_manuel2_OBJECTS = manuel2.$(OBJEXT)
manuel2_OBJECTS = $(am_manuel2_OBJECTS)
manuel2_LDADD = $(LDADD)
manuel2_DEPENDENCIES =
manuel2_LDFLAGS =
am_manuel3_OBJECTS = manuel3.$(OBJEXT)
manuel3_OBJECTS = $(am_manuel3_OBJECTS)
manuel3_LDADD = $(LDADD)
manuel3_DEPENDENCIES =
manuel3_LDFLAGS =
am_match_overrun_OBJECTS = match-overrun.$(OBJEXT)
match_overrun_OBJECTS = $(am_match_overrun_OBJECTS)
match_overrun_LDADD = $(LDADD)
match_overrun_DEPENDENCIES =
match_overrun_LDFLAGS =
am_memalign2_OBJECTS = memalign2.$(OBJEXT)
memalign2_OBJECTS = $(am_memalign2_OBJECTS)
memalign2_LDADD = $(LDADD)
memalign2_DEPENDENCIES =
memalign2_LDFLAGS =
am_memalign_test_OBJECTS = memalign_test.$(OBJEXT)
memalign_test_OBJECTS = $(am_memalign_test_OBJECTS)
memalign_test_LDADD = $(LDADD)
memalign_test_DEPENDENCIES =
memalign_test_LDFLAGS =
am_memcmptest_OBJECTS = memcmptest-memcmptest.$(OBJEXT)
memcmptest_OBJECTS = $(am_memcmptest_OBJECTS)
memcmptest_LDADD = $(LDADD)
memcmptest_DEPENDENCIES =
memcmptest_LDFLAGS =
am_mempool_OBJECTS = mempool.$(OBJEXT)
mempool_OBJECTS = $(am_mempool_OBJECTS)
mempool_LDADD = $(LDADD)
mempool_DEPENDENCIES =
mempool_LDFLAGS =
am_metadata_OBJECTS = metadata.$(OBJEXT)
metadata_OBJECTS = $(am_metadata_OBJECTS)
metadata_LDADD = $(LDADD)
metadata_DEPENDENCIES =
metadata_LDFLAGS =
am_mismatches_OBJECTS = mismatches.$(OBJEXT)
mismatches_OBJECTS = $(am_mismatches_OBJECTS)
mismatches_LDADD = $(LDADD)
mismatches_DEPENDENCIES =
mismatches_LDFLAGS =
am_mmaptest_OBJECTS = mmaptest.$(OBJEXT)
mmaptest_OBJECTS = $(am_mmaptest_OBJECTS)
mmaptest_LDADD = $(LDADD)
mmaptest_DEPENDENCIES =
mmaptest_LDFLAGS =
am_nanoleak_OBJECTS = nanoleak.$(OBJEXT)
nanoleak_OBJECTS = $(am_nanoleak_OBJECTS)
nanoleak_LDADD = $(LDADD)
nanoleak_DEPENDENCIES =
nanoleak_LDFLAGS =
am_new_nothrow_OBJECTS = new_nothrow.$(OBJEXT)
new_nothrow_OBJECTS = $(am_new_nothrow_OBJECTS)
new_nothrow_LDADD = $(LDADD)
new_nothrow_DEPENDENCIES =
new_nothrow_LDFLAGS =
am_new_override_OBJECTS = new_override.$(OBJEXT)
new_override_OBJECTS = $(am_new_override_OBJECTS)
new_override_LDADD = $(LDADD)
new_override_DEPENDENCIES =
new_override_LDFLAGS =
am_null_socket_OBJECTS = null_socket.$(OBJEXT)
null_socket_OBJECTS = $(am_null_socket_OBJECTS)
null_socket_LDADD = $(LDADD)
null_socket_DEPENDENCIES =
null_socket_LDFLAGS =
am_overlap_OBJECTS = overlap-overlap.$(OBJEXT)
overlap_OBJECTS = $(am_overlap_OBJECTS)
overlap_LDADD = $(LDADD)
overlap_DEPENDENCIES =
overlap_LDFLAGS =
am_pointer_trace_OBJECTS = pointer-trace.$(OBJEXT)
pointer_trace_OBJECTS = $(am_pointer_trace_OBJECTS)
pointer_trace_LDADD = $(LDADD)
pointer_trace_DEPENDENCIES =
pointer_trace_LDFLAGS =
am_post_syscall_OBJECTS = post-syscall.$(OBJEXT)
post_syscall_OBJECTS = $(am_post_syscall_OBJECTS)
post_syscall_LDADD = $(LDADD)
post_syscall_DEPENDENCIES =
post_syscall_LDFLAGS =
am_realloc1_OBJECTS = realloc1.$(OBJEXT)
realloc1_OBJECTS = $(am_realloc1_OBJECTS)
realloc1_LDADD = $(LDADD)
realloc1_DEPENDENCIES =
realloc1_LDFLAGS =
am_realloc2_OBJECTS = realloc2.$(OBJEXT)
realloc2_OBJECTS = $(am_realloc2_OBJECTS)
realloc2_LDADD = $(LDADD)
realloc2_DEPENDENCIES =
realloc2_LDFLAGS =
am_realloc3_OBJECTS = realloc3.$(OBJEXT)
realloc3_OBJECTS = $(am_realloc3_OBJECTS)
realloc3_LDADD = $(LDADD)
realloc3_DEPENDENCIES =
realloc3_LDFLAGS =
am_scalar_OBJECTS = scalar.$(OBJEXT)
scalar_OBJECTS = $(am_scalar_OBJECTS)
scalar_LDADD = $(LDADD)
scalar_DEPENDENCIES =
scalar_LDFLAGS =
am_scalar_exit_group_OBJECTS = scalar_exit_group.$(OBJEXT)
scalar_exit_group_OBJECTS = $(am_scalar_exit_group_OBJECTS)
scalar_exit_group_LDADD = $(LDADD)
scalar_exit_group_DEPENDENCIES =
scalar_exit_group_LDFLAGS =
am_scalar_fork_OBJECTS = scalar_fork.$(OBJEXT)
scalar_fork_OBJECTS = $(am_scalar_fork_OBJECTS)
scalar_fork_LDADD = $(LDADD)
scalar_fork_DEPENDENCIES =
scalar_fork_LDFLAGS =
am_scalar_supp_OBJECTS = scalar_supp.$(OBJEXT)
scalar_supp_OBJECTS = $(am_scalar_supp_OBJECTS)
scalar_supp_LDADD = $(LDADD)
scalar_supp_DEPENDENCIES =
scalar_supp_LDFLAGS =
am_scalar_vfork_OBJECTS = scalar_vfork.$(OBJEXT)
scalar_vfork_OBJECTS = $(am_scalar_vfork_OBJECTS)
scalar_vfork_LDADD = $(LDADD)
scalar_vfork_DEPENDENCIES =
scalar_vfork_LDFLAGS =
am_sigaltstack_OBJECTS = sigaltstack.$(OBJEXT)
sigaltstack_OBJECTS = $(am_sigaltstack_OBJECTS)
sigaltstack_LDADD = $(LDADD)
sigaltstack_DEPENDENCIES =
sigaltstack_LDFLAGS =
am_signal2_OBJECTS = signal2.$(OBJEXT)
signal2_OBJECTS = $(am_signal2_OBJECTS)
signal2_LDADD = $(LDADD)
signal2_DEPENDENCIES =
signal2_LDFLAGS =
am_sigprocmask_OBJECTS = sigprocmask.$(OBJEXT)
sigprocmask_OBJECTS = $(am_sigprocmask_OBJECTS)
sigprocmask_LDADD = $(LDADD)
sigprocmask_DEPENDENCIES =
sigprocmask_LDFLAGS =
am_str_tester_OBJECTS = str_tester-str_tester.$(OBJEXT)
str_tester_OBJECTS = $(am_str_tester_OBJECTS)
str_tester_LDADD = $(LDADD)
str_tester_DEPENDENCIES =
str_tester_LDFLAGS =
am_supp1_OBJECTS = supp.$(OBJEXT)
supp1_OBJECTS = $(am_supp1_OBJECTS)
supp1_LDADD = $(LDADD)
supp1_DEPENDENCIES =
supp1_LDFLAGS =
am_supp2_OBJECTS = supp.$(OBJEXT)
supp2_OBJECTS = $(am_supp2_OBJECTS)
supp2_LDADD = $(LDADD)
supp2_DEPENDENCIES =
supp2_LDFLAGS =
am_suppfree_OBJECTS = suppfree.$(OBJEXT)
suppfree_OBJECTS = $(am_suppfree_OBJECTS)
suppfree_LDADD = $(LDADD)
suppfree_DEPENDENCIES =
suppfree_LDFLAGS =
am_threadederrno_OBJECTS = threadederrno.$(OBJEXT)
threadederrno_OBJECTS = $(am_threadederrno_OBJECTS)
threadederrno_DEPENDENCIES =
threadederrno_LDFLAGS =
am_trivialleak_OBJECTS = trivialleak.$(OBJEXT)
trivialleak_OBJECTS = $(am_trivialleak_OBJECTS)
trivialleak_LDADD = $(LDADD)
trivialleak_DEPENDENCIES =
trivialleak_LDFLAGS =
am_vgtest_ume_OBJECTS = vgtest_ume.$(OBJEXT)
vgtest_ume_OBJECTS = $(am_vgtest_ume_OBJECTS)
vgtest_ume_DEPENDENCIES = ../../coregrind/ume.o \
	../../coregrind/jmp_with_stack.o
vgtest_ume_LDFLAGS =
am_weirdioctl_OBJECTS = weirdioctl.$(OBJEXT)
weirdioctl_OBJECTS = $(am_weirdioctl_OBJECTS)
weirdioctl_LDADD = $(LDADD)
weirdioctl_DEPENDENCIES =
weirdioctl_LDFLAGS =
am_writev_OBJECTS = writev.$(OBJEXT)
writev_OBJECTS = $(am_writev_OBJECTS)
writev_LDADD = $(LDADD)
writev_DEPENDENCIES =
writev_LDFLAGS =
am_zeropage_OBJECTS = zeropage.$(OBJEXT)
zeropage_OBJECTS = $(am_zeropage_OBJECTS)
zeropage_LDADD = $(LDADD)
zeropage_DEPENDENCIES =
zeropage_LDFLAGS =
SCRIPTS = $(noinst_SCRIPTS)


DEFS = @DEFS@
DEFAULT_INCLUDES =  -I. -I$(srcdir) -I$(top_builddir)
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
@AMDEP_TRUE@DEP_FILES = ./$(DEPDIR)/addressable.Po \
@AMDEP_TRUE@	./$(DEPDIR)/badaddrvalue.Po ./$(DEPDIR)/badfree.Po \
@AMDEP_TRUE@	./$(DEPDIR)/badjump.Po ./$(DEPDIR)/badjump2.Po \
@AMDEP_TRUE@	./$(DEPDIR)/badloop.Po ./$(DEPDIR)/badpoll.Po \
@AMDEP_TRUE@	./$(DEPDIR)/badrw.Po ./$(DEPDIR)/brk.Po \
@AMDEP_TRUE@	./$(DEPDIR)/brk2.Po ./$(DEPDIR)/buflen_check.Po \
@AMDEP_TRUE@	./$(DEPDIR)/clientperm.Po \
@AMDEP_TRUE@	./$(DEPDIR)/custom_alloc.Po \
@AMDEP_TRUE@	./$(DEPDIR)/describe-block.Po \
@AMDEP_TRUE@	./$(DEPDIR)/doublefree.Po \
@AMDEP_TRUE@	./$(DEPDIR)/error_counts.Po ./$(DEPDIR)/errs1.Po \
@AMDEP_TRUE@	./$(DEPDIR)/execve.Po ./$(DEPDIR)/execve2.Po \
@AMDEP_TRUE@	./$(DEPDIR)/exitprog.Po ./$(DEPDIR)/fprw.Po \
@AMDEP_TRUE@	./$(DEPDIR)/fwrite.Po ./$(DEPDIR)/hello-hello.Po \
@AMDEP_TRUE@	./$(DEPDIR)/inits.Po ./$(DEPDIR)/inline.Po \
@AMDEP_TRUE@	./$(DEPDIR)/leak-0.Po ./$(DEPDIR)/leak-cycle.Po \
@AMDEP_TRUE@	./$(DEPDIR)/leak-regroot.Po \
@AMDEP_TRUE@	./$(DEPDIR)/leak-tree.Po ./$(DEPDIR)/leakotron.Po \
@AMDEP_TRUE@	./$(DEPDIR)/malloc1.Po ./$(DEPDIR)/malloc2.Po \
@AMDEP_TRUE@	./$(DEPDIR)/malloc3.Po ./$(DEPDIR)/manuel1.Po \
@AMDEP_TRUE@	./$(DEPDIR)/manuel2.Po ./$(DEPDIR)/manuel3.Po \
@AMDEP_TRUE@	./$(DEPDIR)/match-overrun.Po \
@AMDEP_TRUE@	./$(DEPDIR)/memalign2.Po \
@AMDEP_TRUE@	./$(DEPDIR)/memalign_test.Po \
@AMDEP_TRUE@	./$(DEPDIR)/memcmptest-memcmptest.Po \
@AMDEP_TRUE@	./$(DEPDIR)/mempool.Po ./$(DEPDIR)/metadata.Po \
@AMDEP_TRUE@	./$(DEPDIR)/mismatches.Po ./$(DEPDIR)/mmaptest.Po \
@AMDEP_TRUE@	./$(DEPDIR)/nanoleak.Po ./$(DEPDIR)/new_nothrow.Po \
@AMDEP_TRUE@	./$(DEPDIR)/new_override.Po \
@AMDEP_TRUE@	./$(DEPDIR)/null_socket.Po \
@AMDEP_TRUE@	./$(DEPDIR)/overlap-overlap.Po \
@AMDEP_TRUE@	./$(DEPDIR)/pointer-trace.Po \
@AMDEP_TRUE@	./$(DEPDIR)/post-syscall.Po ./$(DEPDIR)/realloc1.Po \
@AMDEP_TRUE@	./$(DEPDIR)/realloc2.Po ./$(DEPDIR)/realloc3.Po \
@AMDEP_TRUE@	./$(DEPDIR)/scalar.Po \
@AMDEP_TRUE@	./$(DEPDIR)/scalar_exit_group.Po \
@AMDEP_TRUE@	./$(DEPDIR)/scalar_fork.Po \
@AMDEP_TRUE@	./$(DEPDIR)/scalar_supp.Po \
@AMDEP_TRUE@	./$(DEPDIR)/scalar_vfork.Po \
@AMDEP_TRUE@	./$(DEPDIR)/sigaltstack.Po ./$(DEPDIR)/signal2.Po \
@AMDEP_TRUE@	./$(DEPDIR)/sigprocmask.Po \
@AMDEP_TRUE@	./$(DEPDIR)/str_tester-str_tester.Po \
@AMDEP_TRUE@	./$(DEPDIR)/supp.Po ./$(DEPDIR)/suppfree.Po \
@AMDEP_TRUE@	./$(DEPDIR)/threadederrno.Po \
@AMDEP_TRUE@	./$(DEPDIR)/trivialleak.Po \
@AMDEP_TRUE@	./$(DEPDIR)/vgtest_ume.Po ./$(DEPDIR)/weirdioctl.Po \
@AMDEP_TRUE@	./$(DEPDIR)/writev.Po ./$(DEPDIR)/zeropage.Po
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
CFLAGS = @CFLAGS@
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
CXXFLAGS = @CXXFLAGS@
DIST_SOURCES = $(addressable_SOURCES) $(badaddrvalue_SOURCES) \
	$(badfree_SOURCES) $(badjump_SOURCES) $(badjump2_SOURCES) \
	$(badloop_SOURCES) $(badpoll_SOURCES) $(badrw_SOURCES) \
	$(brk_SOURCES) $(brk2_SOURCES) $(buflen_check_SOURCES) \
	$(clientperm_SOURCES) $(custom_alloc_SOURCES) \
	$(describe_block_SOURCES) $(doublefree_SOURCES) \
	$(error_counts_SOURCES) $(errs1_SOURCES) $(execve_SOURCES) \
	$(execve2_SOURCES) $(exitprog_SOURCES) $(fprw_SOURCES) \
	$(fwrite_SOURCES) $(hello_SOURCES) $(inits_SOURCES) \
	$(inline_SOURCES) $(leak_0_SOURCES) $(leak_cycle_SOURCES) \
	$(leak_regroot_SOURCES) $(leak_tree_SOURCES) \
	$(leakotron_SOURCES) $(malloc1_SOURCES) $(malloc2_SOURCES) \
	$(malloc3_SOURCES) $(manuel1_SOURCES) $(manuel2_SOURCES) \
	$(manuel3_SOURCES) $(match_overrun_SOURCES) \
	$(memalign2_SOURCES) $(memalign_test_SOURCES) \
	$(memcmptest_SOURCES) $(mempool_SOURCES) $(metadata_SOURCES) \
	$(mismatches_SOURCES) $(mmaptest_SOURCES) $(nanoleak_SOURCES) \
	$(new_nothrow_SOURCES) $(new_override_SOURCES) \
	$(null_socket_SOURCES) $(overlap_SOURCES) \
	$(pointer_trace_SOURCES) $(post_syscall_SOURCES) \
	$(realloc1_SOURCES) $(realloc2_SOURCES) $(realloc3_SOURCES) \
	$(scalar_SOURCES) $(scalar_exit_group_SOURCES) \
	$(scalar_fork_SOURCES) $(scalar_supp_SOURCES) \
	$(scalar_vfork_SOURCES) $(sigaltstack_SOURCES) \
	$(signal2_SOURCES) $(sigprocmask_SOURCES) $(str_tester_SOURCES) \
	$(supp1_SOURCES) $(supp2_SOURCES) $(suppfree_SOURCES) \
	$(threadederrno_SOURCES) $(trivialleak_SOURCES) \
	$(vgtest_ume_SOURCES) $(weirdioctl_SOURCES) $(writev_SOURCES) \
	$(zeropage_SOURCES)
HEADERS = $(noinst_HEADERS)


RECURSIVE_TARGETS = info-recursive dvi-recursive install-info-recursive \
	uninstall-info-recursive all-recursive install-data-recursive \
	install-exec-recursive installdirs-recursive install-recursive \
	uninstall-recursive check-recursive installcheck-recursive
DIST_COMMON = $(noinst_HEADERS) Makefile.am Makefile.in
SOURCES = $(addressable_SOURCES) $(badaddrvalue_SOURCES) $(badfree_SOURCES) $(badjump_SOURCES) $(badjump2_SOURCES) $(badloop_SOURCES) $(badpoll_SOURCES) $(badrw_SOURCES) $(brk_SOURCES) $(brk2_SOURCES) $(buflen_check_SOURCES) $(clientperm_SOURCES) $(custom_alloc_SOURCES) $(describe_block_SOURCES) $(doublefree_SOURCES) $(error_counts_SOURCES) $(errs1_SOURCES) $(execve_SOURCES) $(execve2_SOURCES) $(exitprog_SOURCES) $(fprw_SOURCES) $(fwrite_SOURCES) $(hello_SOURCES) $(inits_SOURCES) $(inline_SOURCES) $(leak_0_SOURCES) $(leak_cycle_SOURCES) $(leak_regroot_SOURCES) $(leak_tree_SOURCES) $(leakotron_SOURCES) $(malloc1_SOURCES) $(malloc2_SOURCES) $(malloc3_SOURCES) $(manuel1_SOURCES) $(manuel2_SOURCES) $(manuel3_SOURCES) $(match_overrun_SOURCES) $(memalign2_SOURCES) $(memalign_test_SOURCES) $(memcmptest_SOURCES) $(mempool_SOURCES) $(metadata_SOURCES) $(mismatches_SOURCES) $(mmaptest_SOURCES) $(nanoleak_SOURCES) $(new_nothrow_SOURCES) $(new_override_SOURCES) $(null_socket_SOURCES) $(overlap_SOURCES) $(pointer_trace_SOURCES) $(post_syscall_SOURCES) $(realloc1_SOURCES) $(realloc2_SOURCES) $(realloc3_SOURCES) $(scalar_SOURCES) $(scalar_exit_group_SOURCES) $(scalar_fork_SOURCES) $(scalar_supp_SOURCES) $(scalar_vfork_SOURCES) $(sigaltstack_SOURCES) $(signal2_SOURCES) $(sigprocmask_SOURCES) $(str_tester_SOURCES) $(supp1_SOURCES) $(supp2_SOURCES) $(suppfree_SOURCES) $(threadederrno_SOURCES) $(trivialleak_SOURCES) $(vgtest_ume_SOURCES) $(weirdioctl_SOURCES) $(writev_SOURCES) $(zeropage_SOURCES)

all: all-recursive

.SUFFIXES:
.SUFFIXES: .c .cpp .o .obj
$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ Makefile.am  $(top_srcdir)/configure.in $(ACLOCAL_M4)
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  memcheck/tests/Makefile
Makefile: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)

clean-checkPROGRAMS:
	-test -z "$(check_PROGRAMS)" || rm -f $(check_PROGRAMS)
addressable$(EXEEXT): $(addressable_OBJECTS) $(addressable_DEPENDENCIES) 
	@rm -f addressable$(EXEEXT)
	$(LINK) $(addressable_LDFLAGS) $(addressable_OBJECTS) $(addressable_LDADD) $(LIBS)
badaddrvalue$(EXEEXT): $(badaddrvalue_OBJECTS) $(badaddrvalue_DEPENDENCIES) 
	@rm -f badaddrvalue$(EXEEXT)
	$(LINK) $(badaddrvalue_LDFLAGS) $(badaddrvalue_OBJECTS) $(badaddrvalue_LDADD) $(LIBS)
badfree$(EXEEXT): $(badfree_OBJECTS) $(badfree_DEPENDENCIES) 
	@rm -f badfree$(EXEEXT)
	$(LINK) $(badfree_LDFLAGS) $(badfree_OBJECTS) $(badfree_LDADD) $(LIBS)
badjump$(EXEEXT): $(badjump_OBJECTS) $(badjump_DEPENDENCIES) 
	@rm -f badjump$(EXEEXT)
	$(LINK) $(badjump_LDFLAGS) $(badjump_OBJECTS) $(badjump_LDADD) $(LIBS)
badjump2$(EXEEXT): $(badjump2_OBJECTS) $(badjump2_DEPENDENCIES) 
	@rm -f badjump2$(EXEEXT)
	$(LINK) $(badjump2_LDFLAGS) $(badjump2_OBJECTS) $(badjump2_LDADD) $(LIBS)
badloop$(EXEEXT): $(badloop_OBJECTS) $(badloop_DEPENDENCIES) 
	@rm -f badloop$(EXEEXT)
	$(LINK) $(badloop_LDFLAGS) $(badloop_OBJECTS) $(badloop_LDADD) $(LIBS)
badpoll$(EXEEXT): $(badpoll_OBJECTS) $(badpoll_DEPENDENCIES) 
	@rm -f badpoll$(EXEEXT)
	$(LINK) $(badpoll_LDFLAGS) $(badpoll_OBJECTS) $(badpoll_LDADD) $(LIBS)
badrw$(EXEEXT): $(badrw_OBJECTS) $(badrw_DEPENDENCIES) 
	@rm -f badrw$(EXEEXT)
	$(LINK) $(badrw_LDFLAGS) $(badrw_OBJECTS) $(badrw_LDADD) $(LIBS)
brk$(EXEEXT): $(brk_OBJECTS) $(brk_DEPENDENCIES) 
	@rm -f brk$(EXEEXT)
	$(LINK) $(brk_LDFLAGS) $(brk_OBJECTS) $(brk_LDADD) $(LIBS)
brk2$(EXEEXT): $(brk2_OBJECTS) $(brk2_DEPENDENCIES) 
	@rm -f brk2$(EXEEXT)
	$(LINK) $(brk2_LDFLAGS) $(brk2_OBJECTS) $(brk2_LDADD) $(LIBS)
buflen_check$(EXEEXT): $(buflen_check_OBJECTS) $(buflen_check_DEPENDENCIES) 
	@rm -f buflen_check$(EXEEXT)
	$(LINK) $(buflen_check_LDFLAGS) $(buflen_check_OBJECTS) $(buflen_check_LDADD) $(LIBS)
clientperm$(EXEEXT): $(clientperm_OBJECTS) $(clientperm_DEPENDENCIES) 
	@rm -f clientperm$(EXEEXT)
	$(LINK) $(clientperm_LDFLAGS) $(clientperm_OBJECTS) $(clientperm_LDADD) $(LIBS)
custom_alloc$(EXEEXT): $(custom_alloc_OBJECTS) $(custom_alloc_DEPENDENCIES) 
	@rm -f custom_alloc$(EXEEXT)
	$(LINK) $(custom_alloc_LDFLAGS) $(custom_alloc_OBJECTS) $(custom_alloc_LDADD) $(LIBS)
describe-block$(EXEEXT): $(describe_block_OBJECTS) $(describe_block_DEPENDENCIES) 
	@rm -f describe-block$(EXEEXT)
	$(LINK) $(describe_block_LDFLAGS) $(describe_block_OBJECTS) $(describe_block_LDADD) $(LIBS)
doublefree$(EXEEXT): $(doublefree_OBJECTS) $(doublefree_DEPENDENCIES) 
	@rm -f doublefree$(EXEEXT)
	$(LINK) $(doublefree_LDFLAGS) $(doublefree_OBJECTS) $(doublefree_LDADD) $(LIBS)
error_counts$(EXEEXT): $(error_counts_OBJECTS) $(error_counts_DEPENDENCIES) 
	@rm -f error_counts$(EXEEXT)
	$(LINK) $(error_counts_LDFLAGS) $(error_counts_OBJECTS) $(error_counts_LDADD) $(LIBS)
errs1$(EXEEXT): $(errs1_OBJECTS) $(errs1_DEPENDENCIES) 
	@rm -f errs1$(EXEEXT)
	$(LINK) $(errs1_LDFLAGS) $(errs1_OBJECTS) $(errs1_LDADD) $(LIBS)
execve$(EXEEXT): $(execve_OBJECTS) $(execve_DEPENDENCIES) 
	@rm -f execve$(EXEEXT)
	$(LINK) $(execve_LDFLAGS) $(execve_OBJECTS) $(execve_LDADD) $(LIBS)
execve2$(EXEEXT): $(execve2_OBJECTS) $(execve2_DEPENDENCIES) 
	@rm -f execve2$(EXEEXT)
	$(LINK) $(execve2_LDFLAGS) $(execve2_OBJECTS) $(execve2_LDADD) $(LIBS)
exitprog$(EXEEXT): $(exitprog_OBJECTS) $(exitprog_DEPENDENCIES) 
	@rm -f exitprog$(EXEEXT)
	$(LINK) $(exitprog_LDFLAGS) $(exitprog_OBJECTS) $(exitprog_LDADD) $(LIBS)
fprw$(EXEEXT): $(fprw_OBJECTS) $(fprw_DEPENDENCIES) 
	@rm -f fprw$(EXEEXT)
	$(LINK) $(fprw_LDFLAGS) $(fprw_OBJECTS) $(fprw_LDADD) $(LIBS)
fwrite$(EXEEXT): $(fwrite_OBJECTS) $(fwrite_DEPENDENCIES) 
	@rm -f fwrite$(EXEEXT)
	$(LINK) $(fwrite_LDFLAGS) $(fwrite_OBJECTS) $(fwrite_LDADD) $(LIBS)
hello-hello.$(OBJEXT): hello.c
hello$(EXEEXT): $(hello_OBJECTS) $(hello_DEPENDENCIES) 
	@rm -f hello$(EXEEXT)
	$(LINK) $(hello_LDFLAGS) $(hello_OBJECTS) $(hello_LDADD) $(LIBS)
inits$(EXEEXT): $(inits_OBJECTS) $(inits_DEPENDENCIES) 
	@rm -f inits$(EXEEXT)
	$(LINK) $(inits_LDFLAGS) $(inits_OBJECTS) $(inits_LDADD) $(LIBS)
inline$(EXEEXT): $(inline_OBJECTS) $(inline_DEPENDENCIES) 
	@rm -f inline$(EXEEXT)
	$(LINK) $(inline_LDFLAGS) $(inline_OBJECTS) $(inline_LDADD) $(LIBS)
leak-0$(EXEEXT): $(leak_0_OBJECTS) $(leak_0_DEPENDENCIES) 
	@rm -f leak-0$(EXEEXT)
	$(LINK) $(leak_0_LDFLAGS) $(leak_0_OBJECTS) $(leak_0_LDADD) $(LIBS)
leak-cycle$(EXEEXT): $(leak_cycle_OBJECTS) $(leak_cycle_DEPENDENCIES) 
	@rm -f leak-cycle$(EXEEXT)
	$(LINK) $(leak_cycle_LDFLAGS) $(leak_cycle_OBJECTS) $(leak_cycle_LDADD) $(LIBS)
leak-regroot$(EXEEXT): $(leak_regroot_OBJECTS) $(leak_regroot_DEPENDENCIES) 
	@rm -f leak-regroot$(EXEEXT)
	$(LINK) $(leak_regroot_LDFLAGS) $(leak_regroot_OBJECTS) $(leak_regroot_LDADD) $(LIBS)
leak-tree$(EXEEXT): $(leak_tree_OBJECTS) $(leak_tree_DEPENDENCIES) 
	@rm -f leak-tree$(EXEEXT)
	$(LINK) $(leak_tree_LDFLAGS) $(leak_tree_OBJECTS) $(leak_tree_LDADD) $(LIBS)
leakotron$(EXEEXT): $(leakotron_OBJECTS) $(leakotron_DEPENDENCIES) 
	@rm -f leakotron$(EXEEXT)
	$(LINK) $(leakotron_LDFLAGS) $(leakotron_OBJECTS) $(leakotron_LDADD) $(LIBS)
malloc1$(EXEEXT): $(malloc1_OBJECTS) $(malloc1_DEPENDENCIES) 
	@rm -f malloc1$(EXEEXT)
	$(LINK) $(malloc1_LDFLAGS) $(malloc1_OBJECTS) $(malloc1_LDADD) $(LIBS)
malloc2$(EXEEXT): $(malloc2_OBJECTS) $(malloc2_DEPENDENCIES) 
	@rm -f malloc2$(EXEEXT)
	$(LINK) $(malloc2_LDFLAGS) $(malloc2_OBJECTS) $(malloc2_LDADD) $(LIBS)
malloc3$(EXEEXT): $(malloc3_OBJECTS) $(malloc3_DEPENDENCIES) 
	@rm -f malloc3$(EXEEXT)
	$(LINK) $(malloc3_LDFLAGS) $(malloc3_OBJECTS) $(malloc3_LDADD) $(LIBS)
manuel1$(EXEEXT): $(manuel1_OBJECTS) $(manuel1_DEPENDENCIES) 
	@rm -f manuel1$(EXEEXT)
	$(LINK) $(manuel1_LDFLAGS) $(manuel1_OBJECTS) $(manuel1_LDADD) $(LIBS)
manuel2$(EXEEXT): $(manuel2_OBJECTS) $(manuel2_DEPENDENCIES) 
	@rm -f manuel2$(EXEEXT)
	$(LINK) $(manuel2_LDFLAGS) $(manuel2_OBJECTS) $(manuel2_LDADD) $(LIBS)
manuel3$(EXEEXT): $(manuel3_OBJECTS) $(manuel3_DEPENDENCIES) 
	@rm -f manuel3$(EXEEXT)
	$(LINK) $(manuel3_LDFLAGS) $(manuel3_OBJECTS) $(manuel3_LDADD) $(LIBS)
match-overrun$(EXEEXT): $(match_overrun_OBJECTS) $(match_overrun_DEPENDENCIES) 
	@rm -f match-overrun$(EXEEXT)
	$(LINK) $(match_overrun_LDFLAGS) $(match_overrun_OBJECTS) $(match_overrun_LDADD) $(LIBS)
memalign2$(EXEEXT): $(memalign2_OBJECTS) $(memalign2_DEPENDENCIES) 
	@rm -f memalign2$(EXEEXT)
	$(LINK) $(memalign2_LDFLAGS) $(memalign2_OBJECTS) $(memalign2_LDADD) $(LIBS)
memalign_test$(EXEEXT): $(memalign_test_OBJECTS) $(memalign_test_DEPENDENCIES) 
	@rm -f memalign_test$(EXEEXT)
	$(LINK) $(memalign_test_LDFLAGS) $(memalign_test_OBJECTS) $(memalign_test_LDADD) $(LIBS)
memcmptest-memcmptest.$(OBJEXT): memcmptest.c
memcmptest$(EXEEXT): $(memcmptest_OBJECTS) $(memcmptest_DEPENDENCIES) 
	@rm -f memcmptest$(EXEEXT)
	$(LINK) $(memcmptest_LDFLAGS) $(memcmptest_OBJECTS) $(memcmptest_LDADD) $(LIBS)
mempool$(EXEEXT): $(mempool_OBJECTS) $(mempool_DEPENDENCIES) 
	@rm -f mempool$(EXEEXT)
	$(LINK) $(mempool_LDFLAGS) $(mempool_OBJECTS) $(mempool_LDADD) $(LIBS)
metadata$(EXEEXT): $(metadata_OBJECTS) $(metadata_DEPENDENCIES) 
	@rm -f metadata$(EXEEXT)
	$(LINK) $(metadata_LDFLAGS) $(metadata_OBJECTS) $(metadata_LDADD) $(LIBS)
mismatches$(EXEEXT): $(mismatches_OBJECTS) $(mismatches_DEPENDENCIES) 
	@rm -f mismatches$(EXEEXT)
	$(CXXLINK) $(mismatches_LDFLAGS) $(mismatches_OBJECTS) $(mismatches_LDADD) $(LIBS)
mmaptest$(EXEEXT): $(mmaptest_OBJECTS) $(mmaptest_DEPENDENCIES) 
	@rm -f mmaptest$(EXEEXT)
	$(LINK) $(mmaptest_LDFLAGS) $(mmaptest_OBJECTS) $(mmaptest_LDADD) $(LIBS)
nanoleak$(EXEEXT): $(nanoleak_OBJECTS) $(nanoleak_DEPENDENCIES) 
	@rm -f nanoleak$(EXEEXT)
	$(LINK) $(nanoleak_LDFLAGS) $(nanoleak_OBJECTS) $(nanoleak_LDADD) $(LIBS)
new_nothrow$(EXEEXT): $(new_nothrow_OBJECTS) $(new_nothrow_DEPENDENCIES) 
	@rm -f new_nothrow$(EXEEXT)
	$(CXXLINK) $(new_nothrow_LDFLAGS) $(new_nothrow_OBJECTS) $(new_nothrow_LDADD) $(LIBS)
new_override$(EXEEXT): $(new_override_OBJECTS) $(new_override_DEPENDENCIES) 
	@rm -f new_override$(EXEEXT)
	$(CXXLINK) $(new_override_LDFLAGS) $(new_override_OBJECTS) $(new_override_LDADD) $(LIBS)
null_socket$(EXEEXT): $(null_socket_OBJECTS) $(null_socket_DEPENDENCIES) 
	@rm -f null_socket$(EXEEXT)
	$(LINK) $(null_socket_LDFLAGS) $(null_socket_OBJECTS) $(null_socket_LDADD) $(LIBS)
overlap-overlap.$(OBJEXT): overlap.c
overlap$(EXEEXT): $(overlap_OBJECTS) $(overlap_DEPENDENCIES) 
	@rm -f overlap$(EXEEXT)
	$(LINK) $(overlap_LDFLAGS) $(overlap_OBJECTS) $(overlap_LDADD) $(LIBS)
pointer-trace$(EXEEXT): $(pointer_trace_OBJECTS) $(pointer_trace_DEPENDENCIES) 
	@rm -f pointer-trace$(EXEEXT)
	$(LINK) $(pointer_trace_LDFLAGS) $(pointer_trace_OBJECTS) $(pointer_trace_LDADD) $(LIBS)
post-syscall$(EXEEXT): $(post_syscall_OBJECTS) $(post_syscall_DEPENDENCIES) 
	@rm -f post-syscall$(EXEEXT)
	$(LINK) $(post_syscall_LDFLAGS) $(post_syscall_OBJECTS) $(post_syscall_LDADD) $(LIBS)
realloc1$(EXEEXT): $(realloc1_OBJECTS) $(realloc1_DEPENDENCIES) 
	@rm -f realloc1$(EXEEXT)
	$(LINK) $(realloc1_LDFLAGS) $(realloc1_OBJECTS) $(realloc1_LDADD) $(LIBS)
realloc2$(EXEEXT): $(realloc2_OBJECTS) $(realloc2_DEPENDENCIES) 
	@rm -f realloc2$(EXEEXT)
	$(LINK) $(realloc2_LDFLAGS) $(realloc2_OBJECTS) $(realloc2_LDADD) $(LIBS)
realloc3$(EXEEXT): $(realloc3_OBJECTS) $(realloc3_DEPENDENCIES) 
	@rm -f realloc3$(EXEEXT)
	$(LINK) $(realloc3_LDFLAGS) $(realloc3_OBJECTS) $(realloc3_LDADD) $(LIBS)
scalar$(EXEEXT): $(scalar_OBJECTS) $(scalar_DEPENDENCIES) 
	@rm -f scalar$(EXEEXT)
	$(LINK) $(scalar_LDFLAGS) $(scalar_OBJECTS) $(scalar_LDADD) $(LIBS)
scalar_exit_group$(EXEEXT): $(scalar_exit_group_OBJECTS) $(scalar_exit_group_DEPENDENCIES) 
	@rm -f scalar_exit_group$(EXEEXT)
	$(LINK) $(scalar_exit_group_LDFLAGS) $(scalar_exit_group_OBJECTS) $(scalar_exit_group_LDADD) $(LIBS)
scalar_fork$(EXEEXT): $(scalar_fork_OBJECTS) $(scalar_fork_DEPENDENCIES) 
	@rm -f scalar_fork$(EXEEXT)
	$(LINK) $(scalar_fork_LDFLAGS) $(scalar_fork_OBJECTS) $(scalar_fork_LDADD) $(LIBS)
scalar_supp$(EXEEXT): $(scalar_supp_OBJECTS) $(scalar_supp_DEPENDENCIES) 
	@rm -f scalar_supp$(EXEEXT)
	$(LINK) $(scalar_supp_LDFLAGS) $(scalar_supp_OBJECTS) $(scalar_supp_LDADD) $(LIBS)
scalar_vfork$(EXEEXT): $(scalar_vfork_OBJECTS) $(scalar_vfork_DEPENDENCIES) 
	@rm -f scalar_vfork$(EXEEXT)
	$(LINK) $(scalar_vfork_LDFLAGS) $(scalar_vfork_OBJECTS) $(scalar_vfork_LDADD) $(LIBS)
sigaltstack$(EXEEXT): $(sigaltstack_OBJECTS) $(sigaltstack_DEPENDENCIES) 
	@rm -f sigaltstack$(EXEEXT)
	$(LINK) $(sigaltstack_LDFLAGS) $(sigaltstack_OBJECTS) $(sigaltstack_LDADD) $(LIBS)
signal2$(EXEEXT): $(signal2_OBJECTS) $(signal2_DEPENDENCIES) 
	@rm -f signal2$(EXEEXT)
	$(LINK) $(signal2_LDFLAGS) $(signal2_OBJECTS) $(signal2_LDADD) $(LIBS)
sigprocmask$(EXEEXT): $(sigprocmask_OBJECTS) $(sigprocmask_DEPENDENCIES) 
	@rm -f sigprocmask$(EXEEXT)
	$(LINK) $(sigprocmask_LDFLAGS) $(sigprocmask_OBJECTS) $(sigprocmask_LDADD) $(LIBS)
str_tester-str_tester.$(OBJEXT): str_tester.c
str_tester$(EXEEXT): $(str_tester_OBJECTS) $(str_tester_DEPENDENCIES) 
	@rm -f str_tester$(EXEEXT)
	$(LINK) $(str_tester_LDFLAGS) $(str_tester_OBJECTS) $(str_tester_LDADD) $(LIBS)
supp1$(EXEEXT): $(supp1_OBJECTS) $(supp1_DEPENDENCIES) 
	@rm -f supp1$(EXEEXT)
	$(LINK) $(supp1_LDFLAGS) $(supp1_OBJECTS) $(supp1_LDADD) $(LIBS)
supp2$(EXEEXT): $(supp2_OBJECTS) $(supp2_DEPENDENCIES) 
	@rm -f supp2$(EXEEXT)
	$(LINK) $(supp2_LDFLAGS) $(supp2_OBJECTS) $(supp2_LDADD) $(LIBS)
suppfree$(EXEEXT): $(suppfree_OBJECTS) $(suppfree_DEPENDENCIES) 
	@rm -f suppfree$(EXEEXT)
	$(LINK) $(suppfree_LDFLAGS) $(suppfree_OBJECTS) $(suppfree_LDADD) $(LIBS)
threadederrno$(EXEEXT): $(threadederrno_OBJECTS) $(threadederrno_DEPENDENCIES) 
	@rm -f threadederrno$(EXEEXT)
	$(LINK) $(threadederrno_LDFLAGS) $(threadederrno_OBJECTS) $(threadederrno_LDADD) $(LIBS)
trivialleak$(EXEEXT): $(trivialleak_OBJECTS) $(trivialleak_DEPENDENCIES) 
	@rm -f trivialleak$(EXEEXT)
	$(LINK) $(trivialleak_LDFLAGS) $(trivialleak_OBJECTS) $(trivialleak_LDADD) $(LIBS)
vgtest_ume$(EXEEXT): $(vgtest_ume_OBJECTS) $(vgtest_ume_DEPENDENCIES) 
	@rm -f vgtest_ume$(EXEEXT)
	$(LINK) $(vgtest_ume_LDFLAGS) $(vgtest_ume_OBJECTS) $(vgtest_ume_LDADD) $(LIBS)
weirdioctl$(EXEEXT): $(weirdioctl_OBJECTS) $(weirdioctl_DEPENDENCIES) 
	@rm -f weirdioctl$(EXEEXT)
	$(LINK) $(weirdioctl_LDFLAGS) $(weirdioctl_OBJECTS) $(weirdioctl_LDADD) $(LIBS)
writev$(EXEEXT): $(writev_OBJECTS) $(writev_DEPENDENCIES) 
	@rm -f writev$(EXEEXT)
	$(LINK) $(writev_LDFLAGS) $(writev_OBJECTS) $(writev_LDADD) $(LIBS)
zeropage$(EXEEXT): $(zeropage_OBJECTS) $(zeropage_DEPENDENCIES) 
	@rm -f zeropage$(EXEEXT)
	$(LINK) $(zeropage_LDFLAGS) $(zeropage_OBJECTS) $(zeropage_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/addressable.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/badaddrvalue.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/badfree.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/badjump.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/badjump2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/badloop.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/badpoll.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/badrw.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/brk.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/brk2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/buflen_check.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clientperm.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/custom_alloc.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/describe-block.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/doublefree.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/error_counts.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/errs1.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/execve.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/execve2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/exitprog.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/fprw.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/fwrite.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hello-hello.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/inits.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/inline.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/leak-0.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/leak-cycle.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/leak-regroot.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/leak-tree.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/leakotron.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/malloc1.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/malloc2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/malloc3.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/manuel1.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/manuel2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/manuel3.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/match-overrun.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/memalign2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/memalign_test.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/memcmptest-memcmptest.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mempool.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/metadata.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mismatches.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mmaptest.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/nanoleak.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/new_nothrow.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/new_override.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/null_socket.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/overlap-overlap.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pointer-trace.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/post-syscall.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/realloc1.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/realloc2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/realloc3.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/scalar.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/scalar_exit_group.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/scalar_fork.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/scalar_supp.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/scalar_vfork.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sigaltstack.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/signal2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sigprocmask.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/str_tester-str_tester.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/supp.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/suppfree.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/threadederrno.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/trivialleak.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/vgtest_ume.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/weirdioctl.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/writev.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/zeropage.Po@am__quote@

distclean-depend:
	-rm -rf ./$(DEPDIR)

.c.o:
@AMDEP_TRUE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(COMPILE) -c `test -f '$<' || echo '$(srcdir)/'`$<

.c.obj:
@AMDEP_TRUE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(COMPILE) -c `cygpath -w $<`

hello-hello.o: hello.c
@AMDEP_TRUE@	source='hello.c' object='hello-hello.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/hello-hello.Po' tmpdepfile='$(DEPDIR)/hello-hello.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CFLAGS) $(CFLAGS) -c -o hello-hello.o `test -f 'hello.c' || echo '$(srcdir)/'`hello.c

hello-hello.obj: hello.c
@AMDEP_TRUE@	source='hello.c' object='hello-hello.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/hello-hello.Po' tmpdepfile='$(DEPDIR)/hello-hello.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(hello_CFLAGS) $(CFLAGS) -c -o hello-hello.obj `cygpath -w hello.c`

memcmptest-memcmptest.o: memcmptest.c
@AMDEP_TRUE@	source='memcmptest.c' object='memcmptest-memcmptest.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/memcmptest-memcmptest.Po' tmpdepfile='$(DEPDIR)/memcmptest-memcmptest.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(memcmptest_CFLAGS) $(CFLAGS) -c -o memcmptest-memcmptest.o `test -f 'memcmptest.c' || echo '$(srcdir)/'`memcmptest.c

memcmptest-memcmptest.obj: memcmptest.c
@AMDEP_TRUE@	source='memcmptest.c' object='memcmptest-memcmptest.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/memcmptest-memcmptest.Po' tmpdepfile='$(DEPDIR)/memcmptest-memcmptest.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(memcmptest_CFLAGS) $(CFLAGS) -c -o memcmptest-memcmptest.obj `cygpath -w memcmptest.c`

overlap-overlap.o: overlap.c
@AMDEP_TRUE@	source='overlap.c' object='overlap-overlap.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/overlap-overlap.Po' tmpdepfile='$(DEPDIR)/overlap-overlap.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(overlap_CFLAGS) $(CFLAGS) -c -o overlap-overlap.o `test -f 'overlap.c' || echo '$(srcdir)/'`overlap.c

overlap-overlap.obj: overlap.c
@AMDEP_TRUE@	source='overlap.c' object='overlap-overlap.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/overlap-overlap.Po' tmpdepfile='$(DEPDIR)/overlap-overlap.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(overlap_CFLAGS) $(CFLAGS) -c -o overlap-overlap.obj `cygpath -w overlap.c`

str_tester-str_tester.o: str_tester.c
@AMDEP_TRUE@	source='str_tester.c' object='str_tester-str_tester.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/str_tester-str_tester.Po' tmpdepfile='$(DEPDIR)/str_tester-str_tester.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(str_tester_CFLAGS) $(CFLAGS) -c -o str_tester-str_tester.o `test -f 'str_tester.c' || echo '$(srcdir)/'`str_tester.c

str_tester-str_tester.obj: str_tester.c
@AMDEP_TRUE@	source='str_tester.c' object='str_tester-str_tester.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/str_tester-str_tester.Po' tmpdepfile='$(DEPDIR)/str_tester-str_tester.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(str_tester_CFLAGS) $(CFLAGS) -c -o str_tester-str_tester.obj `cygpath -w str_tester.c`
CCDEPMODE = @CCDEPMODE@

.cpp.o:
@AMDEP_TRUE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

.cpp.obj:
@AMDEP_TRUE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXXCOMPILE) -c -o $@ `cygpath -w $<`
CXXDEPMODE = @CXXDEPMODE@
uninstall-info-am:

# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.
$(RECURSIVE_TARGETS):
	@set fnord $$MAKEFLAGS; amf=$$2; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	   || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

mostlyclean-recursive clean-recursive distclean-recursive \
maintainer-clean-recursive:
	@set fnord $$MAKEFLAGS; amf=$$2; \
	dot_seen=no; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	rev=''; for subdir in $$list; do \
	  if test "$$subdir" = "."; then :; else \
	    rev="$$subdir $$rev"; \
	  fi; \
	done; \
	rev="$$rev ."; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	   || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; \
	done && test -z "$$fail"
tags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \
	done

ETAGS = etags
ETAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS: tags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test -f $$subdir/TAGS && tags="$$tags -i $$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)

top_distdir = ../..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	@list='$(DISTFILES)'; for file in $$list; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkinstalldirs) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
	list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test -d $(distdir)/$$subdir \
	    || mkdir $(distdir)/$$subdir \
	    || exit 1; \
	    (cd $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$(top_distdir)" \
	        distdir=../$(distdir)/$$subdir \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
check: check-recursive
all-am: Makefile $(SCRIPTS) $(HEADERS)
installdirs: installdirs-recursive
installdirs-am:

install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-recursive

clean-am: clean-checkPROGRAMS clean-generic mostlyclean-am

distclean: distclean-recursive

distclean-am: clean-am distclean-compile distclean-depend \
	distclean-generic distclean-tags

dvi: dvi-recursive

dvi-am:

info: info-recursive

info-am:

install-data-am:

install-exec-am:

install-info: install-info-recursive

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-recursive

maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-compile mostlyclean-generic

uninstall-am: uninstall-info-am

uninstall-info: uninstall-info-recursive

.PHONY: $(RECURSIVE_TARGETS) GTAGS all all-am check check-am clean \
	clean-checkPROGRAMS clean-generic clean-recursive distclean \
	distclean-compile distclean-depend distclean-generic \
	distclean-recursive distclean-tags distdir dvi dvi-am \
	dvi-recursive info info-am info-recursive install install-am \
	install-data install-data-am install-data-recursive \
	install-exec install-exec-am install-exec-recursive \
	install-info install-info-am install-info-recursive install-man \
	install-recursive install-strip installcheck installcheck-am \
	installdirs installdirs-am installdirs-recursive \
	maintainer-clean maintainer-clean-generic \
	maintainer-clean-recursive mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-recursive tags tags-recursive \
	uninstall uninstall-am uninstall-info-am \
	uninstall-info-recursive uninstall-recursive

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
